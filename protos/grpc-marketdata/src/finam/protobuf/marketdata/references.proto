syntax = "proto3";

package finam.protobuf.marketdata;

import "finam/protobuf/common/currency.proto";
import "finam/protobuf/common/continent.proto";
import "finam/protobuf/common/country.proto";
import "finam/protobuf/common/exchange.proto";
import "finam/protobuf/marketdata/marketdata.proto";
import "finam/protobuf/common/types.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";

option java_multiple_files = true;
option objc_class_prefix = "FNM";

message SecurityRequest {
    SecurityIdentifier identifier = 1;
}

message SecuritiesRequest {
    repeated SecurityIdentifier identifiers = 1;
}

message IssuersRequest {
    repeated int64 identifiers = 1;
}

// Запрос для поиска ЦБ по критериям
//
// Поиск осуществляется по следующей формуле - places (place OR place OR ... OR place) AND mask AND cfi
// Не заданные параметры не используются при поиске
message SecurityFindRequest {
    message Place {
        oneof place_oneof {
            string  country = 1; // страна, ISO 3166-1 (https://ru.wikipedia.org/wiki/ISO_3166-1)
            string      mic = 2; // биржа, http://www.iso15022.org/MIC/homepageMIC.htm
            string secboard = 3; // режим торгов
        }
    }

    // Список бирж (через указания страны биржи, прямое указание биржи и т.д.) на которых ЦБ была размещена
    repeated Place places = 1;

    // Маска для поиска по полям: название (русское и английское), tiker
    //
    // Для задания маски можно использовать следующие символы:
    //    '.' - соответствует любому произвольному символу
    //    '*' - соответствует любому количеству произвольных символов
    //    '\.' -> '.', '\*' -> '*', '\\' -> '\'
    string           mask = 2;

    // Маска для поиска по полю 'тип инструмента' (CFI)
    //
    // Маска состоит из 6 символов, символ 'X' соответсвует любому символу на заданной позиции
    string            cfi = 3; // маска по CFI, https://en.wikipedia.org/wiki/ISO_10962
}

message MarketData {
    Common common			= 1;
    oneof specific {
        Equity	equity      = 2;
        Option	option      = 3;
        Future	future      = 4;
        Debt	debt        = 5;
        Spread	spread      = 6;
    }
}

message Security {
    message FinamAdditions {
        google.protobuf.Int64Value parent_fid	= 1;	// [parent_fid] from [TA].[TA].Issues
    }

    int64   id                  = 1;
    string  name                = 3;	// [name] from [TA].Issues (old)
    string  regime              = 8;
    string  isin                = 4;    //  https://en.wikipedia.org/wiki/International_Securities_Identification_Number
    string  cusip               = 5;    //  https://en.wikipedia.org/wiki/CUSIP
    string  ticker              = 6;    //  https://en.wikipedia.org/wiki/Ticker_symbol
    string  security_tier       = 7;    //  http://www.otcmarkets.com/learn/otc-market-tiers

    int64   exchange            = 20;
    string  timezone_win        = 21;   //  windows timezone
    string  timezone_olson      = 22;   //  olson timezone
    int64   tz_delta            = 23;   //  displacement from UTC to TimeZone of Exchange in minutes

    common.Currency currency	= 30;
    string  instr_url           = 31;

    int64   decimal_place       = 40;
    int64   lot_size            = 41;   // securities in one trade lot
    int64   pricelot            = 42;   //

    int64   underlying_asset_id = 52;   //  http://www.investopedia.com/terms/u/underlying-asset.asp
    google.protobuf.Timestamp valid_date  = 53;  // date when sec will be closed

    string cfi					= 54;	// тип инструмента,  ISO 10962(CFI), https://en.wikipedia.org/wiki/ISO_10962

    MarketData	market_data		= 55;	// [Data] from [TA].[Markets].[Securities], https://wiki.finam.ru/x/TYDQBQ
    int64	shares_outstanding	= 66;	// [value] from [TA].[TA].SharesOutstanding
    string	mic					= 67;	// https://en.wikipedia.org/wiki/Market_Identifier_Code
    int64   issuer_id           = 68;   // эмитент https://en.wikipedia.org/wiki/Issuer
    FinamAdditions	additions	= 512;  // custom finam fields
}

message Issuer {
    int64   issuer_id						= 1;
	map<int32, string> common_names			= 2;	// имена на разных языках, ключ из enum finam.protobuf.common.Lang
    string  inn								= 3;
    string  okpo							= 4;
    string  ogrn							= 5;
    string  code							= 6;
    string  sector							= 7;
    string  legal_address					= 8;
    string  phone							= 9;
    string  www								= 10;
	google.protobuf.Timestamp valid_before	= 11;
}

message SecurityInfo {
    Security                      security = 1;
    google.protobuf.Timestamp valid_before = 2;
}

message ContinentInfo {
    finam.protobuf.common.Continent code = 1;
    string name = 2;
}

message CountryInfo { // https://ru.wikipedia.org/wiki/ISO_3166-1
    finam.protobuf.common.Country code      = 1; // код страны
    string code_alpha3                      = 2; // трехбуквенный код страны
    string name                             = 3; // название страны
    ContinentInfo continent                 = 4; // континент
    google.protobuf.Int32Value  capital_id  = 5; // идентификатор города(столицы)
    finam.protobuf.common.Currency currency = 6; // код валюты
}

message City {
    int32 id                                = 1; // идентификатор города
    string name                             = 2; // название города
    finam.protobuf.common.Country country   = 3; // страна
    string timezone                         = 4; // временная зона
}

message CurrencyInfo { // ISO 4217 (https://www.iso.org/standard/64758.html)
    finam.protobuf.common.Currency code     = 1; // код валюты
    string name                             = 2; // наименование валюты
    google.protobuf.Int32Value minor_units  = 3; // число десятичных разрядов у разменной денежной единицы
    int32 old_id                            = 4; // наш id, который будет заменен на цифровой код валюты
}

message GICSInfo {  // https://www.msci.com/gics, https://en.wikipedia.org/wiki/Global_Industry_Classification_Standard
    int64  id             = 1;
    string sector         = 2;
    string industry_group = 3;
    string industry       = 4;
    string sub_industry   = 5;
}

message IndustryInfo {
    int64  id             = 1;
    string sector         = 2;
    string industry_group = 3;
    string sub_industry   = 4;
}

message SecurityResponse {
    google.rpc.Status               status = 1;
    SecurityInfo                  security = 2;
    SecurityIdentifier          identifier = 3;
}

message SecuritiesResponse {
    google.rpc.Status               status = 1;
    repeated SecurityResponse       securities = 2;
}

message SecurityFindResponse {
    google.rpc.Status         status = 1;
    repeated SecurityInfo securities = 2;
}

message ExchangesResponse {
    google.rpc.Status                       status = 1;
    repeated finam.protobuf.common.Exchange exchanges = 2;
}

message CountriesResponse {
    google.rpc.Status       status      = 1;
    repeated CountryInfo    countries   = 2;
}

message CitiesResponse {
    google.rpc.Status       status  = 1;
    repeated City           cities  = 2;
}

message CurrenciesResponse {
    google.rpc.Status       status      = 1;
    repeated CurrencyInfo   currencies  = 2;
}

message GICSInfoResponse {
    google.rpc.Status       status     = 1;
    repeated GICSInfo       gics       = 2;
}

message IndustriesInfoResponse {
    google.rpc.Status       status     = 1;
    repeated IndustryInfo   industries = 2;
}

message IssuerInfo {
        google.rpc.Status status = 1;
        Issuer issuer = 2;
}

message IssuersResponse {
    repeated IssuerInfo   issuers = 1;
}

service References {

    // Получение информации по ЦБ
    rpc GetSecurityInfo(SecurityRequest) returns (SecurityResponse) {}

    // Получение информации по перечню ЦБ
    // Когда все найденные ЦБ будут переданы клиенту полностью, поток (stream complete) будет закрыт сервером.
    rpc GetSecuritiesInfo(SecuritiesRequest) returns (stream SecuritiesResponse) {}

    rpc GetExchangeInfo(google.protobuf.Empty) returns (ExchangesResponse) {}
    rpc GetCountryInfo(google.protobuf.Empty) returns (CountriesResponse) {}
    rpc GetCityInfo(google.protobuf.Empty) returns (CitiesResponse) {}
    rpc GetCurrenciesInfo(google.protobuf.Empty) returns (CurrenciesResponse) {}

    // Поиск ЦБ по критериям
    //
    // Когда все найденные ЦБ будут переданы клиенту полностью, поток (stream complete) будет закрыт сервером.
    // Через эту же функцию можно получить индексы, указав в поиске CFI с маской MRIXXX
    rpc FindSecurityInfo(SecurityFindRequest) returns (stream SecurityFindResponse) {}

    // Получение справочной информации по Глобальному стандарту классификации отраслей
    rpc GetGICSInfo(google.protobuf.Empty) returns (GICSInfoResponse) {}

    rpc GetIndustriesInfo(google.protobuf.Empty) returns (IndustriesInfoResponse) {}

    // Получение индексов, к которым принадлежит бумага
    rpc GetSecurityIndices(SecurityRequest) returns (SecuritiesResponse) {}

    // Получение бумаг, принадлежащих данному индексу
    // Когда все найденные ЦБ будут переданы клиенту полностью, поток (stream complete) будет закрыт сервером.
    rpc GetIndexSecurities(SecurityRequest) returns (stream SecuritiesResponse) {}

    // Получение описания эмитентов по перечню id
    // Когда описания всех эмитентов будут переданы клиенту полностью, поток (stream complete) будет закрыт сервером.
    rpc GetIssuersInfo(IssuersRequest) returns (stream IssuersResponse) {}

    // Получение бумаг, принадлежащих данному эмитенту
    // Когда все найденные ЦБ будут переданы клиенту полностью, поток (stream complete) будет закрыт сервером.
    rpc GetSecuritiesByIssuers(IssuersRequest) returns (stream SecuritiesResponse) {}
}
